#region MIT License
/*
 * MIT License
 *
 * Copyright (c) 2024 - 2024 Krypton Suite
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
#endregion

namespace Krypton.Toolkit.Suite.Extended.Forms
{
    internal class OperationThreadExtended : GlobalId
    {
        #region Instance Fields
        private readonly Operation _op;
        private readonly object? _parameter;
        private int _state;

        #endregion

        #region Identity
        /// <summary>
        /// Initialize a new instance of the OperationThread class.
        /// </summary>
        /// <param name="op">Operation to perform on thread.</param>
        /// <param name="parameter">Parameter to pass into operation.</param>
        public OperationThreadExtended(Operation op, object? parameter)
        {
            // Remember the passed operation details
            _op = op;
            _parameter = parameter;

            // Operation still running
            _state = 0;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the current operation state.
        /// </summary>
        public int State
        {
            get
            {
                int ret;

                // Read the state in a thread state way
                lock (this)
                {
                    ret = _state;
                }

                return ret;
            }
        }

        /// <summary>
        /// Gets the result from the operation.
        /// </summary>
        public object Result { get; private set; }

        /// <summary>
        /// Gets the exception generated by operation.
        /// </summary>
        public Exception Exception { get; private set; }

        #endregion

        #region Run
        /// <summary>
        /// Entry point for performing operation.
        /// </summary>
        public void Run()
        {
            try
            {
                // Execute the operation
                Result = _op(_parameter);

                // Success
                lock (this)
                {
                    _state = 1;
                }
            }
            catch (Exception ex)
            {
                // Remember the exception details
                Exception = ex;

                // Failed with exception
                lock (this)
                {
                    _state = 2;
                }
            }
        }
        #endregion
    }
}